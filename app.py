import streamlit as st
from openai import OpenAI
import os

# –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

st.title("üß† –§–∞–±—Ä–∏–∫–∞ AI-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")

# –°–∞–π–¥–±–∞—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
st.sidebar.header("üé≠ –ù–∞—Å—Ç—Ä–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
archetype = st.sidebar.selectbox("–ê—Ä—Ö–µ—Ç–∏–ø", ["–ú—É–¥—Ä–µ—Ü", "–ì–µ—Ä–æ–π", "–¢—Ä–∏–∫—Å—Ç–µ—Ä", "–ü—Ä–∞–≤–∏—Ç–µ–ª—å"])
personality = st.sidebar.text_input("–•–∞—Ä–∞–∫—Ç–µ—Ä", "–∏—Ä–æ–Ω–∏—á–Ω—ã–π –∏ —Å–ø–æ–∫–æ–π–Ω—ã–π")
bio = st.sidebar.text_area("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è", "–ñ–∏–≤—ë—Ç –≤ –±–∞—à–Ω–µ, –∏–∑—É—á–∞–µ—Ç –º–∞–≥–∏—é...")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è system prompt
system_prompt = f"""
–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –∞—Ä—Ö–µ—Ç–∏–ø–æ–º {archetype}.
–¢–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: {personality}.
–ë–∏–æ–≥—Ä–∞—Ñ–∏—è: {bio}.
–û–±—â–∞–π—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—è—Å—å —ç—Ç–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫.
"""

# –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# –í–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_input = st.chat_input("–°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
if user_input:
    st.session_state.chat_history.append({"role": "user", "content": user_input})

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = [{"role": "system", "content": system_prompt}] + st.session_state.chat_history

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages
        )
        reply = response.choices[0].message.content.strip()
        st.session_state.chat_history.append({"role": "assistant", "content": reply})
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
for msg in st.session_state.chat_history:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])
