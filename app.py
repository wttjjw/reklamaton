import streamlit as st
import openai

# –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
openai.api_key = st.secrets["OPENAI_API_KEY"]

st.title("üß† –§–∞–±—Ä–∏–∫–∞ AI-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
st.sidebar.header("üé≠ –ù–∞—Å—Ç—Ä–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")

archetype = st.sidebar.selectbox(
    "–ê—Ä—Ö–µ—Ç–∏–ø",
    ["–ú—É–¥—Ä–µ—Ü", "–ì–µ—Ä–æ–π", "–¢—Ä–∏–∫—Å—Ç–µ—Ä", "–ü—Ä–∞–≤–∏—Ç–µ–ª—å", "–õ—é–±–æ–≤–Ω–∏–∫", "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å"]
)

personality = st.sidebar.text_input("–•–∞—Ä–∞–∫—Ç–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", value="—Å–ø–æ–∫–æ–π–Ω—ã–π –∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–π")

biography = st.sidebar.text_area(
    "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
    value="–ñ–∏–ª –≤ —É–µ–¥–∏–Ω—ë–Ω–Ω–æ–π –±–∞—à–Ω–µ –∏ –∏–∑—É—á–∞–ª –º–∞–≥–∏—á–µ—Å–∫–∏–µ –∫–Ω–∏–≥–∏. –ú–µ—á—Ç–∞–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –º–∏—Ä."
)

# –§–æ—Ä–º–∏—Ä—É–µ–º system prompt
system_prompt = f"""
–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –∞—Ä—Ö–µ—Ç–∏–ø–æ–º {archetype}.
–¢–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: {personality}.
–ë–∏–æ–≥—Ä–∞—Ñ–∏—è: {biography}.
–¢—ã –≤–µ–¥—ë—à—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–∏–º–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏.
"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_input = st.chat_input("–°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å —É —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")

if user_input:
    st.session_state.chat_history.append({"role": "user", "content": user_input})

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    messages = [{"role": "system", "content": system_prompt}] + st.session_state.chat_history

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages
        )
        reply = response.choices[0].message.content.strip()
        st.session_state.chat_history.append({"role": "assistant", "content": reply})
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API: {e}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç
for msg in st.session_state.chat_history:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])
